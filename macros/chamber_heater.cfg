# WARNING: DO NOT EDIT THIS FILE
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.


#####
# CHAMBER HEATER CONFIGURATION
####
[gcode_macro RatOS]
variable_chamber_heater_enable: True               # True|False = enable chamber heater control
variable_chamber_heater_type: "hotend"             # generic_heater|output_pin|hotend = type of heater control
variable_chamber_heater_preheating_temp: 150       # int = the temp the generic_heater is set to when preheating the chamber
variable_chamber_heater_heating_temp_offset: 25    # int = the temp offset for the generic_heater, in addition to the target chamber_temp, while printing


#####
# CHAMBER HEATER CONTROL MACROS
####
[gcode_macro _CHAMBER_HEATER_ON]
variable_chamber_temp: 0
gcode:
	# parameter
	{% set bed_temp = params.BED_TEMP|default(0)|int %}
	{% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}
	{% set start_chamber_temp = params.START_CHAMBER_TEMP|default(0)|int %}

	# config
	{% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set chamber_heater_enable = true if printer["gcode_macro RatOS"].chamber_heater_enable|default(true)|lower == 'true' else false %}
	{% set chamber_heater_type = printer["gcode_macro RatOS"].chamber_heater_type|default("hotend")|lower %}
	{% set chamber_heater_preheating_temp = printer["gcode_macro RatOS"].chamber_heater_preheating_temp|default(150)|int %}
	{% set chamber_heater_heating_temp_offset = printer["gcode_macro RatOS"].chamber_heater_heating_temp_offset|default(20)|int %}

	DEBUG_ECHO PREFIX="_CHAMBER_HEATER_ON" MSG="chamber_heater_enable: {chamber_heater_enable}, chamber_heater_type: {chamber_heater_type}, chamber_heater_preheating_temp: {chamber_heater_preheating_temp}, chamber_heater_heating_temp_offset: {chamber_heater_heating_temp_offset}, bed_temp: {bed_temp}, chamber_temp: {chamber_temp}, start_chamber_temp: {start_chamber_temp}"

	# activate chamber heater on
	{% if chamber_heater_enable and chamber_temp > 0 and bed_temp > 0 %}

		# visual feedback
		_LED_HEATING

		# echo
		RATOS_ECHO MSG="Preheating chamber to {(start_chamber_temp if start_chamber_temp > 0 else chamber_temp)}Â°C..."

		M140 S{bed_temp}
		G0 Z{z} F{z_speed}
		M84

		# cache chamber_temp
        SET_GCODE_VARIABLE MACRO=_CHAMBER_HEATER_ON VARIABLE=chamber_temp VALUE={chamber_temp}

		# wait until the hotend reaches the chamber temp
		{% if chamber_heater_type == "hotend" %}
			TEMPERATURE_WAIT SENSOR=extruder MINIMUM={(start_chamber_temp if start_chamber_temp > 0 else chamber_temp)}

		# activate the chamber heater and wait for the chamber target temperature. 
		{% elif chamber_heater_type == "generic_heater" %}
			{% if printer["temperature_sensor chamber"] is defined and printer["heater_generic chamber_heater"] is defined and printer["heater_fan chamber_heater_fan"] is defined %}
				SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={chamber_heater_preheating_temp}
				TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={(start_chamber_temp if start_chamber_temp > 0 else chamber_temp)}
				SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={(chamber_temp + chamber_heater_heating_temp_offset)}
				UPDATE_DELAYED_GCODE ID=_CHAMBER_HEATER_CONTROL DURATION=5
			{% endif %}

		# activate the output pin for external heating solutions with integrated temperature control
		{% elif chamber_heater_type == "output_pin" %}
			{% if printer["output_pin chamber_heater_pin"] is defined %}
				SET_PIN PIN=chamber_heater_pin VALUE=1.0
			{% endif %}

		{% endif %}

		MAYBE_HOME

	{% endif %}


[gcode_macro _CHAMBER_HEATER_OFF]
gcode:
	# config
	{% set chamber_heater_enable = true if printer["gcode_macro RatOS"].chamber_heater_enable|default(true)|lower == 'true' else false %}
	{% set chamber_heater_type = printer["gcode_macro RatOS"].chamber_heater_type|default("hotend")|lower %}

	DEBUG_ECHO PREFIX="_CHAMBER_HEATER_OFF" MSG="chamber_heater_enable: {chamber_heater_enable}, chamber_heater_type: {chamber_heater_type}"

	# deactivate chamber heater
	{% if chamber_heater_enable %}

		RATOS_ECHO MSG="Deactivating chamber heater..."

		# reset chamber_temp cache
        SET_GCODE_VARIABLE MACRO=_CHAMBER_HEATER_ON VARIABLE=chamber_temp VALUE=0

		# deactivate chamber heater
		{% if chamber_heater_type == "generic_heater" %}
			{% if printer["temperature_sensor chamber"] is defined and printer["heater_generic chamber_heater"] is defined and printer["heater_fan chamber_heater_fan"] is defined %}
				SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
			{% endif %}

		# deactivate the output pin for external heating solutions with integrated temperature control
		{% elif chamber_heater_type == "output_pin" %}
			{% if printer["output_pin chamber_heater_pin"] is defined %}
				SET_PIN PIN=chamber_heater_pin VALUE=0.0
			{% endif %}

		{% endif %}

	{% endif %}


[delayed_gcode _CHAMBER_HEATER_CONTROL]
initial_duration: 0.
gcode:
	# config
	{% set chamber_temp = printer["gcode_macro _CHAMBER_HEATER_ON"].chamber_temp|default(20)|int %}
	{% set chamber_heater_heating_temp_offset = printer["gcode_macro RatOS"].chamber_heater_heating_temp_offset|default(20)|int %}

	# get current chamber temperature
	{% set current_chamber_temp = printer['temperature_sensor chamber'].temperature|int %}

	DEBUG_ECHO PREFIX="_CHAMBER_HEATER_CONTROL" MSG="current_chamber_temp: {current_chamber_temp}, target_chamber_temp: {chamber_temp}, chamber_heater_heating_temp_offset: {chamber_heater_heating_temp_offset}"

	# activate chamber heater if needed
	{% if current_chamber_temp < chamber_temp %}
		SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={(chamber_temp + chamber_heater_heating_temp_offset)}
	{% endif %}

	# deactivate chamber heater if not needed anymore
	{% if current_chamber_temp >= chamber_temp %}
		SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
	{% endif %}

	# reschedule
	UPDATE_DELAYED_GCODE ID=_CHAMBER_HEATER_CONTROL DURATION=5
