# WARNING: DO NOT EDIT THIS FILE
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

#####
# CONFIGURATION VARIABLES
#####

[gcode_macro ECHO_RATOS_VARS]
description: Echo RatOS variables to the console.
gcode:
	{% for var, value in printer["gcode_macro RatOS"].items() %}
		{action_respond_info(var ~ ": " ~ value)}
	{% endfor %}
	
[gcode_macro RatOS]
description: RatOS variable storage macro, will echo variables to the console when run.
variable_relative_extrusion: False
variable_force_absolute_position: False
variable_preheat_extruder: True
variable_preheat_extruder_temp: 150
variable_macro_travel_speed: 150
variable_macro_travel_accel: 2000
variable_macro_z_speed: 15
variable_bed_margin_x: [0, 0]
variable_bed_margin_y: [0, 0]
variable_printable_x_min: 0
variable_printable_x_max: 0
variable_printable_y_min: 0
variable_printable_y_max: 0
variable_end_print_motors_off: True
gcode:
	ECHO_RATOS_VARS

[delayed_gcode RATOS_INIT]
initial_duration: 0.1
gcode:
	CALCULATE_PRINTABLE_AREA

[gcode_macro CALCULATE_PRINTABLE_AREA]
gcode:
	{% set bed_margin_x = printer["gcode_macro RatOS"].bed_margin_x %}
	{% set bed_margin_y = printer["gcode_macro RatOS"].bed_margin_y %}

	# original code
	# with T1 as default toolhead it returns 240 instead of 300
	{% set tool = 0 if printer["gcode_macro T0"] is not defined or printer["gcode_macro T0"].active else 1 %}
	{% set max_x = printer.toolhead.axis_maximum.x if printer["dual_carriage"] is defined and tool == 0 else printer.toolhead.axis_maximum.x - bed_margin_x[1] %}

	# Temporary bugfix bc original code deosnt work if T1 is default toolhead
	{% if printer["dual_carriage"] is defined %}
		# printer.toolhead.axis_maximum.x returns here always 300 on my idex
		# we are calling this macro when klipper starts
		# so this printer["gcode_macro T0"].active is always false
		# doesnt make any sense at all to use it here		 
		{% set max_x = printer.toolhead.axis_maximum.x %}
	{% endif %}

	DEBUG_ECHO PREFIX="CALCULATE_PRINTABLE_AREA" MSG="printer.toolhead.axis_maximum.x {printer.toolhead.axis_maximum.x}"

	{% set max_y = printer.toolhead.axis_maximum.y - bed_margin_y[1]%}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=printable_x_max VALUE={max_x}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=printable_y_max VALUE={max_y}
	DEBUG_ECHO PREFIX="CALCULATE_PRINTABLE_AREA" MSG="Printable area calculated: X: 0,{max_x} Y: 0,{max_y}"

[gcode_macro CACHE_TOOLHEAD_SETTINGS]
variable_old_accel: 1000
variable_old_decel: 500
variable_old_speed: 50
variable_old_scv: 5
gcode:
	SET_GCODE_VARIABLE MACRO=CACHE_TOOLHEAD_SETTINGS VARIABLE=old_accel VALUE={ printer.toolhead.max_accel }
	SET_GCODE_VARIABLE MACRO=CACHE_TOOLHEAD_SETTINGS VARIABLE=old_decel VALUE={ printer.toolhead.max_accel_to_decel }
	SET_GCODE_VARIABLE MACRO=CACHE_TOOLHEAD_SETTINGS VARIABLE=old_speed VALUE={ printer.toolhead.max_velocity }
	SET_GCODE_VARIABLE MACRO=CACHE_TOOLHEAD_SETTINGS VARIABLE=old_scv VALUE={ printer.toolhead.square_corner_velocity }
	DEBUG_ECHO PREFIX="CACHE_TOOLHEAD_SETTINGS" MSG="Toolhead settings cached. ${printer.toolhead.max_accel} accel, ${printer.toolhead.max_accel_to_decel} decel, ${printer.toolhead.max_velocity} velocity, ${printer.toolhead.square_corner_velocity} scv."

[gcode_macro SET_MACRO_TRAVEL_SETTINGS]
gcode:
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set accel = printer["gcode_macro RatOS"].macro_travel_accel %}
	SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel/2} VELOCITY={speed} SQUARE_CORNER_VELOCITY={5}
	DEBUG_ECHO PREFIX="SET_MACRO_TRAVEL_SETTINGS" MSG="Macro travel settings set. ${accel} accel, ${speed} velocity"

[gcode_macro RESTORE_TOOLHEAD_SETTINGS]
gcode:
	{% set old_accel = printer["gcode_macro CACHE_TOOLHEAD_SETTINGS"].old_accel %}
	{% set old_decel = printer["gcode_macro CACHE_TOOLHEAD_SETTINGS"].old_decel %}
	{% set old_speed = printer["gcode_macro CACHE_TOOLHEAD_SETTINGS"].old_speed %}
	{% set old_scv = printer["gcode_macro CACHE_TOOLHEAD_SETTINGS"].old_scv %}
	SET_VELOCITY_LIMIT ACCEL={old_accel} ACCEL_TO_DECEL={old_decel} VELOCITY={old_speed} SQUARE_CORNER_VELOCITY={old_scv}
	DEBUG_ECHO PREFIX="RESTORE_TOOLHEAD_SETTINGS" MSG="Toolhead settings restored. ${old_accel} accel, ${old_decel} decel, ${old_speed} velocity, ${old_scv} scv."
	
[gcode_macro SET_CENTER_KINEMATIC_POSITION]
description: FOR DEBUGGING PURPOSES ONLY. Sets the internal printer kinematic state to the center of all axes regardless of actual physical position.
gcode:
	# config
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}

	RATOS_ECHO MSG="WARNING: ONLY USE SET_CENTER_KINEMATIC_POSITION FOR DEBUGGING PURPOSES. YOU'RE OVERRIDING THE INTERNAL POSITIONING STATE OF THE PRINTER. PROCEED WITH CAUTION AND DO A PROPER G28 WHEN DONE."
	SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=True
	{% if printer["dual_carriage"] is not defined %}
		# DEFAULT
		SET_KINEMATIC_POSITION X={printable_x_max / 2} Y={printable_y_max / 2} Z={printer.toolhead.axis_maximum.z / 2}
	{% else %}
		# IDEX
		IDEX_SET_CENTER_KINEMATIC_POSITION
	{% endif %}

[gcode_macro IDEX_SET_CENTER_KINEMATIC_POSITION]
description: FOR DEBUGGING PURPOSES ONLY. Sets the internal printer kinematic state to the center of all axes regardless of actual physical position.
gcode:
	# config
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}

	RATOS_ECHO MSG="WARNING: ONLY USE SET_CENTER_KINEMATIC_POSITION FOR DEBUGGING PURPOSES. YOU'RE OVERRIDING THE INTERNAL POSITIONING STATE OF THE PRINTER. PROCEED WITH CAUTION AND DO A PROPER G28 WHEN DONE."
	SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=True
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set center_x = printable_x_max / 2 %}
	SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
	SET_KINEMATIC_POSITION X={center_x - (center_x / 2)} Y={printable_y_max / 2} Z={printer.toolhead.axis_maximum.z / 2}
	SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
	SET_KINEMATIC_POSITION X={center_x + (center_x / 2)} Y={printable_y_max / 2} Z={printer.toolhead.axis_maximum.z / 2}
	SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
	
[gcode_macro VERIFY_HYBRID_INVERTED]
gcode:
	# inverted hybrid core-xy bugfix sanity check
	{% set inverted = False %}
	{% if printer.configfile.settings.ratos_hybrid_corexy is defined and printer.configfile.settings.ratos_hybrid_corexy.inverted is defined %}
		{% if printer.configfile.settings.ratos_hybrid_corexy.inverted|lower == 'true' %}
			{% set inverted = True %}
		{% endif %}
	{% endif %}
	{% if inverted == False %}
		{ action_emergency_stop("ratos_hybrid_corexy NOT INVERTED! Inverted hybrid core-xy bugfix not detected.") }
	{% endif %}

[gcode_macro RATOS_ECHO]
gcode:
	{% set prefix = "RatOS" %}
	{% set debug = params.DEBUG|default(0)|int %}
	{% if params.PREFIX is defined %}
		{% set prefix = prefix ~ " | " ~ params.PREFIX %}
	{% endif %}
	{% set prefix = prefix ~ ":" %}
	{% set msg = "" %}
	{% if params.MSG is defined %}
		{% set msg = params.MSG %}
	{% else %}
		{% set msg = "No msg parameter provided (this is a bug or unintended use)." %}
	{% endif %}
	{% if not debug %}
		# Print to display if not a debug message
		M117 {prefix} {msg}
	{% endif %}
	RESPOND PREFIX="{prefix}" MSG="{msg}"

### DEBUGGING MACROS
[gcode_macro ENABLE_DEBUG]
gcode:
	SET_GCODE_VARIABLE MACRO=DEBUG_ECHO VARIABLE=enabled VALUE=True
	SET_GCODE_VARIABLE MACRO=DEBUG_ECHO VARIABLE=prefix_filter VALUE="'{params.FILTER|default('')|lower}'"
	RATOS_ECHO PREFIX="DEBUG" MSG="Debugging enabled."
	
[gcode_macro DISABLE_DEBUG]
gcode:
	SET_GCODE_VARIABLE MACRO=DEBUG_ECHO VARIABLE=enabled VALUE=False
	RATOS_ECHO PREFIX="DEBUG" MSG="Debugging disabled."

[gcode_macro DEBUG_ECHO]
variable_enabled: False
variable_prefix_filter: ''
gcode:
	{% set prefix = "DEBUG" %}
	{% if params.PREFIX is defined %}
		{% set prefix = prefix ~ " - " ~ params.PREFIX %}
	{% endif %}
	{% if enabled and (prefix_filter|lower == '' or prefix_filter|lower in params.PREFIX|lower) %}
  	RATOS_ECHO PREFIX="{prefix}" MSG="{params.MSG}" DEBUG=1
	{% endif %}
