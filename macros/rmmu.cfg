
#####
# RMMU UNLOAD MACROS
#####
[gcode_macro _RMMU_UNLOAD_FILAMENT_FROM_NOZZLE_TO_COOLING_ZONE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}
	{% set pause = params.PAUSE|default(3000)|int %}
	{% set copy_mirror = True if params.COPY_MIRROR|default('false')|lower == 'true' else False %}

	# get current printing mode
	{% set is_printing_gcode = true if printer["gcode_macro START_PRINT"].is_printing_gcode|default(true)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_RMMU_UNLOAD_FILAMENT_FROM_NOZZLE_TO_COOLING_ZONE" MSG="TOOLHEAD={toolhead}, IS_PRINTING_GCODE={is_printing_gcode}"

	{% if is_printing_gcode and "xyz" in printer.toolhead.homed_axes %}

		# config
		{% set purge_before_unload = printer["gcode_macro T%s" % toolhead].purge_before_unload|float %}

		# cache current speed
		SET_GCODE_VARIABLE MACRO=_RMMU_ON_FILAMENT_HAS_CHANGED VARIABLE=fan_speed VALUE={printer["fan"].speed|float}

		# turn fan off
		M106 S0

		# move to loading position
		{% if not copy_mirror %}
			_MOVE_TO_LOADING_POSITION TOOLHEAD={toolhead}
		{% endif %}

		# purge
		{% if purge_before_unload > 0 %}
			_PURGE_BEFORE_UNLOAD TOOLHEAD={toolhead}
		{% else %}
			# wait a bit for the filament to melt in case it was a short move
			G4 P3000
		{% endif %}

	{% endif %}

	# unload filament
	_UNLOAD_FILAMENT_FROM_NOZZLE_TO_COOLING_ZONE TOOLHEAD={toolhead} PAUSE={pause}

	# wait for moves to finish
	M400


#####
# UI EXPOSED FILAMENT MACROS
#####
[gcode_macro HOME_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|default(-1)|int %}

	DEBUG_ECHO PREFIX="HOME_FILAMENT" MSG="TOOLHEAD={toolhead}"

	{% if printer["rmmu_hub"] is defined %}
		{% if toolhead >= -1 and toolhead < printer["rmmu_hub"].total_tool_count %}
			RMMU_HOME_FILAMENT TOOLHEAD={toolhead}
		{% else %}
			RATOS_ECHO MSG="Please select correct toolhead!"
		{% endif %}
	{% endif %}


[gcode_macro MOVE_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|default(-1)|int %}
	{% set move = params.MOVE|default(50)|int %}
	{% set speed = params.SPEED|default(10)|int %}
	{% set accel = params.ACCEL|default(100)|int %}
	{% set sync = params.SYNC_EXTRUDER|default(0)|int %}

	DEBUG_ECHO PREFIX="MOVE_FILAMENT" MSG="TOOLHEAD={toolhead}, MOVE={move}, SPEED={speed}, SYNC={sync}"

	{% if printer["rmmu_hub"] is defined %}
		{% if toolhead >= 0 and toolhead < printer["rmmu_hub"].total_tool_count %}
			{% if sync == 1 and not printer[printer.toolhead.extruder].can_extrude %}
				RATOS_ECHO MSG="Hotend to cold for synced moves!"
			{% else %}
				RMMU_MOVE_FILAMENT { rawparams }
			{% endif %}
		{% else %}
			RATOS_ECHO MSG="Please select correct toolhead!"
		{% endif %}
	{% endif %}


[gcode_macro EJECT_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|default(-1)|int %}

	DEBUG_ECHO PREFIX="EJECT_FILAMENT" MSG="TOOLHEAD={toolhead}"

	{% if printer["rmmu_hub"] is defined %}
		{% if toolhead >= -1 and toolhead < printer["rmmu_hub"].total_tool_count %}
			RMMU_EJECT_FILAMENT TOOLHEAD={toolhead}
		{% else %}
			RATOS_ECHO MSG="Please select correct toolhead!"
		{% endif %}
	{% endif %}


[gcode_macro JOIN_SPOOLS]
gcode:
	# parameter
	{% set spools = params.SPOOLS|default("") %}

	DEBUG_ECHO PREFIX="JOIN_SPOOLS" MSG="SPOOLS={spools}"

	{% if printer["rmmu"] is defined %}
		RMMU_JOIN_SPOOLS SPOOLS={spools}
	{% endif %}


[gcode_macro REMAP_TOOLHEADS]
gcode:
	# parameter
	{% set toolheads = params.TOOLHEADS|default("") %}

	DEBUG_ECHO PREFIX="REMAP_TOOLHEADS" MSG="TOOLHEADS={toolheads}"

	{% if printer["rmmu"] is defined %}
		RMMU_REMAP_TOOLHEADS TOOLHEADS={toolheads}
	{% endif %}


#####
# RMMU HOOKS
#####
[gcode_macro _RMMU_BEFORE_FILAMENT_CHANGE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}
	{% set x = params.X|float %}                           # next x coordinate after toolchange
	{% set y = params.Y|float %}                           # next y coordinate after toolchange
	{% set wipe_accel = params.WIPE_ACCEL|int %}           # slicer profile wipe tower accel
	{% set copy_mirror = True if params.COPY_MIRROR|default('false')|lower == 'true' else False %}

	# config
	{% set loading_position = printer["gcode_macro T%s" % toolhead].loading_position|float %}
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set accel = printer["gcode_macro RatOS"].toolchange_travel_accel %}
	{% set loading_position_t0 = printer["gcode_macro T0"].loading_position|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set center_x = printable_x_max / 2 %}

	DEBUG_ECHO PREFIX="_RMMU_BEFORE_FILAMENT_CHANGE" MSG="TOOLHEAD={toolhead}, X={x}, Y={y}, SPEED={speed}, ACCEL={accel}, WIPE_ACCEL={wipe_accel}"

	# move to parking position
	M204 S{accel}                                                       # set travel acceleration                
	G92 E0                                                              # reset extrusion distance
	{% if not copy_mirror %}
		G0 E-3 F3600                                                    # retract filament
		G0 X{loading_position} Y{y} F{speed}                            # move to wipe tower y position and park toolhead
	{% else %}
		# G1 X{center_x} F{speed}                                       # move to x center
		# _IDEX_MIRROR DANCE=0                                          # switch to mirror mode
		# G1 X{(center_x - (center_x + loading_position_t0))} F{speed}  # move both toolheads to the loading positions
	{% endif %}
	G92 E0                                                              # reset extrusion distance
	M400                                                                # wait for moves to finish
	M204 S{wipe_accel}                                                  # set wipe tower acceleration                


[gcode_macro _RMMU_BEFORE_FILAMENT_RUNOUT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}
	{% set clogged = true if params.CLOGGED|default(true)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_RMMU_BEFORE_FILAMENT_RUNOUT" MSG="TOOLHEAD={toolhead}, CLOGGED={clogged}"

	# move to loading position
	_MOVE_TO_LOADING_POSITION TOOLHEAD={toolhead}

	# give the filament some time to melt before doing the tip forming
	G4 P2000


[gcode_macro _RMMU_AFTER_FILAMENT_INSERT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set purge_after_load = printer["gcode_macro T%s" % toolhead].purge_after_load|float %}
	{% set purge_feedrate = printer["gcode_macro T%s" % toolhead].purge_feedrate|float %}

	DEBUG_ECHO PREFIX="_RMMU_AFTER_FILAMENT_INSERT" MSG="TOOLHEAD={toolhead}"

	# purge filament
	_PURGE_FILAMENT TOOLHEAD=0 E={purge_after_load} R=2 F={purge_feedrate}

	# retract a bit
	G92 E0                                 # Reset extrusion distance
	G0 E-2 F2100                           # retract
	M400                                   # Wait for move to complete

	# cleaning move
	_CLEANING_MOVE TOOLHEAD={toolhead}

	# visual feedback
	_LED_PRINTING

	# resume print
	RESUME


#####
# RMMU EVENTS
#####
[gcode_macro _RMMU_ON_FILAMENT_HAS_CHANGED]
variable_x: 0
variable_y: 0
variable_z: 0
variable_fan_speed: 0
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}
	{% set copy_mirror = True if params.COPY_MIRROR|default('false')|lower == 'true' else False %}

	# get current printing mode
	{% set is_printing_gcode = true if printer["gcode_macro START_PRINT"].is_printing_gcode|default(true)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_RMMU_ON_FILAMENT_HAS_CHANGED" MSG="TOOLHEAD={toolhead}, IS_PRINTING_GCODE={is_printing_gcode}"

	{% if is_printing_gcode and "xyz" in printer.toolhead.homed_axes %}

		# config
		{% set purge_after_load = printer["gcode_macro T%s" % toolhead].purge_after_load|float %}
		{% set purge_feedrate = printer["gcode_macro T%s" % toolhead].purge_feedrate|float %}
		{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

		# Handle toolhead settings
		CACHE_TOOLHEAD_SETTINGS
		SET_MACRO_TRAVEL_SETTINGS

		# purge filament
		G92 E0                                 # Reset extrusion distance
		_PURGE_FILAMENT TOOLHEAD={toolhead} E={purge_after_load} R=2 F={purge_feedrate}

		# retract a bit
		G92 E0                                 # Reset extrusion distance
		G0 E-2 F2100                           # retract
		M400                                   # Wait for move to complete

		# cleaning move
		_CLEANING_MOVE TOOLHEAD={toolhead}

		# turn fan back on
		M106 S{(255 * fan_speed)}

		# reset fan speed cache
		SET_GCODE_VARIABLE MACRO=_RMMU_ON_FILAMENT_HAS_CHANGED VARIABLE=fan_speed VALUE=0

		# move back to printing position
		{% if not copy_mirror %}
			G1 X{x} Y{y} Z{z} F{speed}
		{% endif %}

		# Handle toolhead settings
		RESTORE_TOOLHEAD_SETTINGS

		# visual feedback
		_LED_PRINTING

	{% endif %}


[gcode_macro _RMMU_ON_FILAMENT_LOADING_ERROR]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|default(-1)|int %}

	# get current printing mode
	{% set is_printing_gcode = true if printer["gcode_macro START_PRINT"].is_printing_gcode|default(true)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_RMMU_ON_FILAMENT_LOADING_ERROR" MSG="TOOLHEAD={toolhead}, IS_PRINTING_GCODE={is_printing_gcode}"

	# visual feedback
	_LED_ERROR	

	{% if is_printing_gcode and "xyz" in printer.toolhead.homed_axes %}
		RATOS_ECHO MSG="Toolhead T{toolhead} error!"
		RATOS_ECHO MSG="Please load filament T{toolhead} and resume the print!"
		SAVE_GCODE_STATE NAME=PAUSE_state
		{printer.configfile.settings['gcode_macro pause'].rename_existing}
	{% else %}
		{ action_raise_error("Toolhead T%s error!" % toolhead)}
	{% endif %}


#####
# OVERRIDES
#####
# do not call M104 from within RatOS macros
# use SET_HEATER_TEMPERATURE instead 
[gcode_macro M104]
rename_existing: M104.1
gcode:
	# parameter
	{% set s = params.S|default(0)|int %}
	{% set t = params.T|default(-1)|int %}

	{% if t == -1 %}
		M104.1 S{s}

	{% else %}
		# get physical toolhead
		{% if printer["rmmu_hub"] is defined %}
			{% set t = printer["rmmu_hub"].mapping["%s" % t]["TOOLHEAD"]|int %}
		{% endif %}

		# set temperature offset
		{% if printer["gcode_macro T%s" % t] is defined %}
			{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
			{% set s = [s + temperature_offset, 0]|max %}
			{% if temperature_offset != 0 %}
				RATOS_ECHO PREFIX="M104" MSG="Temperatur offset of {temperature_offset}°C added to toolhead T{t}."
			{% endif %}
		{% endif %}

		# handle idex toolhead standby
		{% set is_in_standby = false %}
		{% if printer["dual_carriage"] is defined %}
			{% set toolchange_standby_temp = printer["gcode_macro RatOS"].toolchange_standby_temp|default(-1)|float %}
			{% if toolchange_standby_temp > -1 %}
				{% set is_in_standby = true if printer["gcode_macro T%s" % t].standby|default(false)|lower == 'true' else false %}
			{% endif %}
		{% endif %}

		# call klipper base function
		{% if not is_in_standby %}
			M104.1 S{s} T{t}
		{% endif %}

	{% endif %}


# do not call M109 from within RatOS macros
# use TEMPERATURE_WAIT instead 
[gcode_macro M109]
rename_existing: M109.1
gcode:
	# parameter
	{% set s = params.S|default(0)|int %}
	{% set t = params.T|default(-1)|int %}

	{% if t == -1 %}
		M109.1 S{s}

	{% else %}
		# get physical toolhead
		{% if printer["rmmu_hub"] is defined %}
			{% set t = printer["rmmu_hub"].mapping["%s" % t]["TOOLHEAD"]|int %}
		{% endif %}

		# set temperature offset
		{% if printer["gcode_macro T%s" % t] is defined %}
			{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
			{% set s = [s + temperature_offset, 0]|max %}
			{% if temperature_offset != 0 %}
				RATOS_ECHO PREFIX="M109" MSG="Temperatur offset of {temperature_offset}°C added to toolhead T{t}."
			{% endif %}
		{% endif %}

		# handle idex toolhead standby
		{% set is_in_standby = false %}
		{% if printer["dual_carriage"] is defined %}
			{% set toolchange_standby_temp = printer["gcode_macro RatOS"].toolchange_standby_temp|default(-1)|float %}
			{% if toolchange_standby_temp > -1 %}
				{% set is_in_standby = true if printer["gcode_macro T%s" % t].standby|default(false)|lower == 'true' else false %}
			{% endif %}
		{% endif %}

		# call klipper base function
		{% if not is_in_standby %}
			M109.1 S{s} T{t}
		{% endif %}

	{% endif %}


[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE_BASE
gcode:
	# parameter
	{% set heater = params.HEATER|default("") %}
	{% set target = params.TARGET|default(0)|int %}

	{% if heater|lower == "extruder" or heater|lower == "extruder1" %}
		# get physical toolhead
		{% set t = 0 if heater|lower == "extruder" else 1 %}

		# set temperature offset
		{% if printer["gcode_macro T%s" % t] is defined and target > 0 %}
			{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
			{% set target = [target + temperature_offset, 0]|max %}
			{% if temperature_offset != 0 %}
				RATOS_ECHO PREFIX="SET_HEATER_TEMPERATURE" MSG="Temperatur offset of {temperature_offset}°C added to toolhead T{t}."
			{% endif %}
		{% endif %}

	{% endif %}

	# call klipper base function
	SET_HEATER_TEMPERATURE_BASE HEATER={heater} TARGET={target}


[gcode_macro TEMPERATURE_WAIT]
rename_existing: TEMPERATURE_WAIT_BASE
gcode:
	# parameter
	{% set sensor = params.SENSOR|default("") %}
	{% set minimum = params.MINIMUM|default(-1)|int %}
	{% set maximum = params.MAXIMUM|default(-1)|int %}

	{% if sensor|lower == "extruder" or sensor|lower == "extruder1" %}
		# get physical toolhead
		{% set t = 0 if sensor|lower == "extruder" else 1 %}

		# set temperature offset
		{% if printer["gcode_macro T%s" % t] is defined and (minimum > 0 or maximum > 0) %}
			{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
			{% if minimum > -1 %}
				{% set minimum = [minimum + temperature_offset, 0]|max %}
			{% endif %}
			{% if maximum > -1 %}
				{% set maximum = [maximum + temperature_offset, 0]|max %}
			{% endif %}
			{% if temperature_offset != 0 %}
				RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Temperatur offset of {temperature_offset}°C added to toolhead T{t}."
			{% endif %}
		{% endif %}

	{% endif %}

	# call klipper base function
	{% if minimum > -1 and maximum > -1 %}
		TEMPERATURE_WAIT_BASE SENSOR={sensor} MINIMUM={minimum} MAXIMUM={maximum}
	{% elif minimum > -1 and maximum == -1 %}
		TEMPERATURE_WAIT_BASE SENSOR={sensor} MINIMUM={minimum}
	{% elif minimum == -1 and maximum > -1 %}
		TEMPERATURE_WAIT_BASE SENSOR={sensor} MAXIMUM={maximum}
	{% endif %}
